Пояснительная записка

Python мессенджер, написанный с использованием Qt5, Flask. 

Задействованные библиотеки для:
		Сервера: sqlite3, hashlib, Flask, time
		UI: PyQt5, requests, hashlib, sys.


Описание проекта:
GUI интерфейс написан на Pyqt. При запуске программы появляется окно регистирации/авторизации, после успешного входа в аккаунт 
пользователь попадает в общий чат. Слева есть список всех пользователей, с каждым из них можно начать/продолжить личный чат

Две базы данных - обе привязаны к серверу (т.е. пользователю не обязательно наличие БД у себя на устройстве, при условии
что сервер не локальный)
Одна БД хранит список пользователей и список сообщений из общего чата, вторая БД предназначена для хранения личных чатов и 
сообщений в них.

Процесс регистирации/авторизации:
	При регистрации отправляется запрос на сервер, где происходит проверка на индивидульность имени, и если такого имени еще нет, то 
	пользователь добавляется в базу.
	Когда при входе в аккаунт мы посылаем запрос на получение списка всех пользователей, сервер 
	берет эти данные с БД и отображает на странице /users. Далее, главная программа берет эти данные, которые хранятся как json
	объект и выполняет проверку вводимых данных на верность и валидность

Процесс отправки сообщений:
	Этот процесс и для отправки сообщений в личный чат, и для отправки сообщений в общий чат - одинаков.
	Когда пользователь нажимает на кнопку отправки сообщения, на сервер отправляется запрос вместе с json, в json 
	мы передаем текст сообщения и имя отправителя. Сервер принимает этот json, проевряет его на валидность, если что-то не так, он кидает 
	400 ошибку пользователю. Если все ок, то сервер просто добавляет это сообщение в базу данных. Далее, метод, который запущен на фоне
	(get_mess), наход это сообщение и отрисовывает его в нашем приложении.
	
Как устроенны личные чаты:
	У меня все работает довольно сложно. Постараюсь обяснить 
	Когда пользователь захочет создать новый чат, сервер добавляет в базу данных таблицу, с именем (имя_пользователя1 + имя_пользователя2).
	Например, мой ник - pasha. Я захочу начать чат с пользователем alex. В этом случае, будет создана таблица с именем alexpasha. 
	В этой таблице будут следующие столбцы - имя отправителя, текст сообщения и время отправления сообщения.
	Далее, после создания чата в БД, открывается UI окно, в котором уже можно начинать общение. (Принцип отправки сообщений в личном чате
	такой же, как и в общем чате)

Как устроен поиск пользователей:
	Когда пользователь нажимает на кнопку поиска, то программа пробегается по всем пользователям мессенджера, и если то имя, 
	которое ввел пользователь есть в списке пользователей, то создается новый чат в БД и отображается окно, в котором можно начать общение

Возможности, факты:
	1) Система регистирации/авторизации со свой БД MySQL
	2) Создание ОБЩЕГО чата, для всех пользователей.
	3) Сервер мессенджера, использующий Flask
	4) Хранение паролей в БД в хешированном виде
	5) Личные чаты
	6) Поиск чатов из общего списка пользователей
	7) Выравнивание сообщений (Сообщения пользователя - от центра до правого края, сообщения других пользователей - от левого края до центра
	8) Картинка отправки сообщения позаимствованая из Telegram
	
	
